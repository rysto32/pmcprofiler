// Copyright (c) 2018 Ryan Stone.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

#include <cxxtest/TestSuite.h>

#include "SharedPtr.h"

#include "ValueTraits/SharedPtr.h"

#include <map>

class TargetClass
{
private:
	int x;
	long y;

	typedef std::map<const void *, size_t> AllocMap;
	static AllocMap allocMap;

	void Register()
	{
		const auto * ptr = static_cast<const void *>(this);
		allocMap.insert(std::make_pair(ptr, sizeof(*this)));
	}

	void Deregister()
	{
		const auto * ptr = static_cast<const void *>(this);
		allocMap.erase(ptr);
	}

public:
	TargetClass(int x, long y)
	  : x(x), y(y)
	{
		Register();
	}

	TargetClass(TargetClass && other)
	  : x(other.x), y(other.y)
	{
		Register();
	}

	TargetClass(const TargetClass &) = delete;

	~TargetClass()
	{
		Deregister();
	}

	TargetClass & operator=(TargetClass &&) = delete;
	TargetClass & operator=(const TargetClass &) = delete;

	int getX() const
	{
		return x;
	}

	long getY() const
	{
		return y;
	}

	static bool IsAllocated(const TargetClass * t)
	{
		const auto * ptr = static_cast<const void *>(t);
		return allocMap.count(ptr) != 0;
	}
};

TargetClass::AllocMap TargetClass::allocMap;

typedef SharedPtr<TargetClass> TargetPtr;

class SharedPtrTestSuite : public CxxTest::TestSuite
{
public:
	void TestDefaultConstructor()
	{
		TargetPtr ptr;

		TS_ASSERT(!ptr);
		TS_ASSERT_EQUALS(ptr.get(), nullptr);
	}

	void TestMakeEmplace()
	{
		TargetPtr ptr(TargetPtr::make(0, 1));

		TS_ASSERT(ptr);
		TS_ASSERT_EQUALS(ptr->getX(), 0);
		TS_ASSERT_EQUALS(ptr->getY(), 1L);

		const auto * actual = ptr.get();
		TS_ASSERT(TargetClass::IsAllocated(actual));

		ptr.clear();
		TS_ASSERT(!TargetClass::IsAllocated(actual));
	}

	void TestMakeMove()
	{
		const TargetClass *actual;
		{
			TargetPtr ptr(TargetPtr::make(TargetClass(2, 10)));

			TS_ASSERT(ptr);
			TS_ASSERT_EQUALS(ptr->getX(), 2);
			TS_ASSERT_EQUALS(ptr->getY(), 10L);

			actual = ptr.get();
			TS_ASSERT(TargetClass::IsAllocated(actual));
		}
		TS_ASSERT(!TargetClass::IsAllocated(actual));
	}

	void TestCopyConstructor()
	{
		TargetPtr first(TargetPtr::make(0, 1));
		TargetPtr second(first);

		TS_ASSERT(second);
		TS_ASSERT_EQUALS(first, second);
		TS_ASSERT_EQUALS(first.get(), second.get());

		const auto * actual = first.get();

		first.clear();
		TS_ASSERT(second);
		TS_ASSERT(TargetClass::IsAllocated(actual));

		second = TargetPtr::make(1, 0);
		TS_ASSERT(!TargetClass::IsAllocated(actual));
	}

	void TestMoveConstructor()
	{
		TargetPtr first(TargetPtr::make(0, 1));
		TargetPtr second = first;
		TargetPtr third(std::move(second));

		TS_ASSERT(third);
		TS_ASSERT_EQUALS(first, third);
		TS_ASSERT_EQUALS(first.get(), third.get());

		const auto * actual = first.get();
		TS_ASSERT(TargetClass::IsAllocated(actual));

		// Clear only first and third and ensure that second doesn't
		// hold a stray reference.
		first.clear();
		TS_ASSERT(TargetClass::IsAllocated(actual));

		third.clear();
		TS_ASSERT(!TargetClass::IsAllocated(actual));
	}

	void TestDereference()
	{
		TargetPtr first(TargetPtr::make(1000, 4186));

		TS_ASSERT_EQUALS((*first).getX(), 1000);
		TS_ASSERT_EQUALS((*first).getY(), 4186);
	}

	void TestPointsTo()
	{
		TargetPtr first(TargetPtr::make(1652, 26));

		TS_ASSERT_EQUALS(first->getX(), 1652);
		TS_ASSERT_EQUALS(first->getY(), 26);
	}

	void TestCopyAssign()
	{
		TargetPtr first(TargetPtr::make(8, 7));
		TargetPtr second;

		TS_ASSERT_DIFFERS(first, second);

		second = first;

		TS_ASSERT_EQUALS(first, second);
		TS_ASSERT_EQUALS(first.get(), second.get());

		auto * ptr = first.get();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		first.clear();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		TargetPtr third(TargetPtr::make(4, 5));
		second = third;
		TS_ASSERT_EQUALS(third, second);
		TS_ASSERT_EQUALS(third.get(), second.get());
		TS_ASSERT(!TargetClass::IsAllocated(ptr));
	}

	// assign from a null TargetPtr
	void TestCopyAssignFromNull()
	{
		TargetPtr first;
		TargetPtr second(TargetPtr::make(65, 61));

		auto * ptr = second.get();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		// assign null to a valid pointer and check that we freed mem
		second = first;
		TS_ASSERT(!TargetClass::IsAllocated(ptr));
		TS_ASSERT(!second);

		// assign null to a null pointer and check that it is still null
		TargetPtr third;
		third = first;
		TS_ASSERT(!third);
	}

	void TestMoveAssign()
	{
		TargetPtr first(TargetPtr::make(68, 44));
		TargetPtr second(first);
		TargetPtr third(TargetPtr::make(19, 11));

		auto * ptr = third.get();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		// assign to a valid pointer and check that we freed mem
		third = std::move(second);
		TS_ASSERT(!TargetClass::IsAllocated(ptr));
		TS_ASSERT_EQUALS(first, third);
		TS_ASSERT_EQUALS(first.get(), third.get());
		TS_ASSERT_DIFFERS(third.get(), ptr);

		TargetPtr fourth;

		fourth = std::move(first);
		TS_ASSERT_EQUALS(fourth, third);
		TS_ASSERT_EQUALS(fourth.get(), third.get());

		ptr = third.get();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		third.clear();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		fourth.clear();
		TS_ASSERT(!TargetClass::IsAllocated(ptr));
	}

	void TestMoveAssignFromNull()
	{
		TargetPtr first;
		TargetPtr second(TargetPtr::make(32, 18));
		TargetPtr third;

		TS_ASSERT_DIFFERS(first, second);
		TS_ASSERT_DIFFERS(second, third);

		auto * ptr = second.get();
		TS_ASSERT(TargetClass::IsAllocated(ptr));

		second = std::move(first);
		TS_ASSERT(!TargetClass::IsAllocated(ptr));
		TS_ASSERT_EQUALS(first, second);
		TS_ASSERT(!second);

		third = TargetPtr();
		TS_ASSERT(!third);
	}
};
